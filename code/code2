
import cv2
import numpy as np
import matplotlib.pyplot as plt
from color_threshold import color_threshold
from detect import detect

plt.close('all')
#Carga de archivos
filename = 'images/UTE/ute4.jpg'
img = cv2.imread(filename)
blurred = cv2.medianBlur(img, 25)
gray = cv2.cvtColor(blurred, cv2.COLOR_BGR2GRAY)
blurred = cv2.medianBlur(gray, 25)
#Aplico umbral para tener imagen binaria
ret, thresh = cv2.threshold(blurred, np.median(gray), 255, 1)
#Hallo contornos
(_, contours, _) = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

#Hallo contornos que sean rectangulos y los ploteo
rectangles = []
for contour in contours:
    M = cv2.moments(contour)
    shape = detect(contour)
    if shape == "rectangle":
        cv2.drawContours(img, [contour], -1, (0, 255, 0), 3)
        rect = cv2.boundingRect(contour)
        rectangles.append(rect)
#        cv2.rectangle(img, (rect[0],rect[1]), (rect[2]+rect[0],rect[3]+rect[1]), (255,0,0), 3)

total_area = thresh.size
max_allowed = total_area*0.5

areas = [rectangle[2] * rectangle[3] for rectangle in rectangles]
ganamos = np.argmax(np.array([rectangle[2] * rectangle[3] for rectangle in rectangles if rectangle[2] * rectangle[3] < max_allowed]))

rect = rectangles[ganamos]
cv2.rectangle(img, (rect[0],rect[1]), (rect[2]+rect[0],rect[3]+rect[1]), (255,0,0), 10)

plt.figure(figsize=(5, 30))
#plt.subplot(211)
plt.imshow(img)
#plt.subplot(212)
#plt.imshow(thresh, cmap='gray')
